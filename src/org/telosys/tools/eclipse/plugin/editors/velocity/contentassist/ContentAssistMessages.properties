# Velocity directives documentation

directive.set.doc=\
<div class="section">\
<h3><a name="set_directive"></a>#set - Establishes the value of a reference</h3>\
<p> Format: </p> \
<p><strong> #set( <em>$ref</em> = <em>arg</em> ) </strong></p>\
<p> Usage: </p>\
<ul>\
 <li><em>$ref</em> - The LHS of the assignment must be a variable reference or a property reference.</li>\
 <li><em>arg</em> - The RHS of the assignment, <em>arg</em> is parsed if enclosed in double quotes, \
    and not parsed if enclosed in single quotes.  If the RHS evaluates to <em>null</em>, it is <b>not</b> assigned to the LHS.</li> \
</ul> \
<p> Examples: </p>\
 <ul>\
  <li>Variable reference: #set( $monkey = $bill )</li> \
  <li>String literal: #set( $monkey.Friend = 'monica' )</li>\
  <li>Property reference: #set( $monkey.Blame = $whitehouse.Leak )</li>\
  <li>Method reference: #set( $monkey.Plan = $spindoctor.weave($web) )</li>\
  <li>Number literal: #set( $monkey.Number = 123 )</li> \
  <li>Range operator: #set( $monkey.Numbers = [1..3] )</li> \
  <li>Object list: #set( $monkey.Say = ["Not", $my, "fault"] )</li> \
  <li>Object map: #set( $monkey.Map = {"banana" : "good", "roast beef" : "bad"})</li> \
</ul> \
<p> The RHS can also be a simple arithmetic expression, such as: </p> \
 <ul>\
  <li>Addition: #set( $value = $foo + 1 )</li> \
  <li>Subtraction: #set( $value = $bar - 1 )</li> \
  <li>Multiplication: #set( $value = $foo * $bar )</li> \
  <li>Division: #set( $value = $foo / $bar )</li> \
  <li>Remainder: #set( $value = $foo % $bar )</li> \
 </ul> \
</div>

directive.if.doc=\
<div class="section">\
<h3><a name="if_directive"></a>#if &nbsp;/&nbsp; #elseif &nbsp;/&nbsp; #else - Output conditional on truth of statements</h3> \
<p> Format: </p> \
<p><strong>\
#if ( [condition] ) [output] <br>\
[ #elseif ( [condition] ) [output] ]* <br>\
[ #else [output] ] #end \
</strong></p>\
<p> Usage: </p> \
 <ul>\
  <li><em>condition</em> - If a boolean, considered true if it has a true false; if not a boolean, considered true if not null.</li>\
  <li><em>output</em> - May contain VTL.</li>\
   </ul> <p> Examples (showing different operators): </p> \
   <table class="bodyTable" border="1"><tbody>\
   <tr class="a"><th>Operator Name</th> <th>Symbol</th> <th>Alternative Symbol</th> <th>Example</th> </tr> \
   <tr class="b"><td>Equals Number</td> <td>==</td> <td>eq</td> <td> #if( $foo == 42 )</td> </tr> \
   <tr class="a"><td>Equals String</td> <td>==</td> <td>eq</td> <td> #if( $foo == "bar" )</td> </tr> \
   <tr class="b"><td>Object Equivalence</td> <td>==</td> <td>eq</td> <td> #if( $foo == $bar )</td> </tr>\
   <tr class="a"><td>Not Equals</td> <td>!=</td> <td>ne</td> <td> #if( $foo != $bar )</td> </tr> \
   <tr class="b"><td>Greater Than</td> <td>&gt;</td> <td>gt</td> <td> #if( $foo &gt; 42 )</td> </tr> \
   <tr class="a"><td>Less Than</td> <td>&lt;</td> <td>lt</td> <td> #if( $foo &lt; 42 )</td> </tr> \
   <tr class="b"><td>Greater Than or Equal To</td> <td>&gt;=</td> <td>ge</td> <td> #if( $foo &gt;= 42 )</td> </tr> \
   <tr class="a"><td>Less Than or Equal To</td> <td>&lt;=</td> <td>le</td> <td> #if( $foo &lt;= 42 )</td> </tr> \
   <tr class="b"><td>Boolean NOT</td> <td>!</td> <td>not</td> <td> #if( !$foo )</td> </tr> \
   </tbody></table> \
<p>Notes:</p> \
 <ol type="1">\
  <li> The == operator can be used to compare numbers, strings, objects of the same class, or objects of different classes. \
   In the last case (when objects are of different classes), \
   the toString() method is called on each object and the resulting Strings are compared. </li> \
  <li> You can also use brackets to delimit directives.  \
   This is especially useful when text immediately follows an <code>#else</code> directive. </li> \
 </ol> \
 <div class="source"><pre>#if( $foo == $bar)it's true!#{else}it's not!#end </pre> </div> \
</div>

directive.foreach.doc=\
<div class="section">\
 <h3><a name="foreach_directive"></a>#foreach - Loops through a list of objects</h3>\
 <p> Format: </p> \
 <p> <strong> #foreach ( <em>$ref</em> in <em>arg</em> ) <em>statement</em> #end </strong></p> \
 <p> Usage: </p> \
 <ul>\
  <li><em>$ref</em> - The first variable reference is the item.</li> \
  <li><em>arg</em> - May be one of the following: a reference to a list (i.e. object array, collection, or map),\
   an array list, or the range operator.</li> \
  <li><em>statement</em> - What is output each time Velocity finds a valid item in the list denoted above as <i>arg</i>.\
   This output is any valid VTL and is rendered each iteration of the loop. </li> \
 </ul> \
 <p> Examples of the #foreach(), omitting the statement block : </p> \
 <ul>\
  <li>Reference: #foreach ( $item in $items )</li> \
  <li>Array list: #foreach ( $item in ["Not", $my, "fault"] )</li> \
  <li>Range operator: #foreach ( $item in [1..3] )</li> \
 </ul>\
 <p> Velocity provides an easy way to get the loop counter so that you can do something like the following: </p> \
 <div class="source">\
 <pre>&lt;table&gt; <br>\
 #foreach( $customer in $customerList ) &lt;tr&gt;&lt;td&gt;$foreach.count&lt;/td&gt;&lt;td&gt;$customer.Name&lt;/td&gt;&lt;/tr&gt; #end <br>\
 &lt;/table&gt; </pre>\
 </div> \
 <p> Additionally, the maximum allowed number of loop iterations can be controlled engine-wide (an ability introduced in Velocity 1.5). By default, there is no limit: </p>\
 <div class="source"><pre># The maximum allowed number of loops. directive.foreach.maxloops = -1 </pre> </div> \
</div>

directive.include.doc=\
<div class="section">\
 <h3><a name="include_directive"></a>#include - Renders local file(s) that are not parsed by Velocity</h3> \
 <p> Format: </p> \
 <p><strong>#include ( arg [ arg2  ... argn ] )</strong></p>\
  <ul>\
   <li><em>arg</em> - Refers to a valid file under TEMPLATE_ROOT.</li> \
  </ul>\
 <p> Examples: </p>\
  <ul>\
   <li>String: #include( "disclaimer.txt"  "opinion.txt" )</li> \
   <li>Variable: #include( $foo  $bar )</li> \
  </ul> \
 </div>

directive.parse.doc=\
<div class="section">\
<h3><a name="parse_directive"></a>#parse - Renders a local template that is parsed by Velocity</h3> \
<p> Format: </p> \
<p><strong> #parse ( arg ) </strong></p> \
<ul>\
 <li><em>arg</em> - Refers to a template under TEMPLATE_ROOT.</li> \
</ul> \
<p> Examples: </p> \
<ul>\
 <li>String: #parse( "lecorbusier.vm" )</li> \
 <li>Variable: #parse( $foo )</li> \
</ul> \
<p> Recursion permitted. \
See <em>parse_directive.maxdepth</em> in <code>velocity.properties</code> to change from parse depth.\
 (The default parse depth is 10.) </p> \
</div>

directive.stop.doc=\
<div class="section">\
<h3><a name="stop_directive"></a>#stop - Stops the template engine</h3> \
<p> Format: </p> \
<p><strong> #stop </strong></p> \
<p> Usage: </p> \
<p> This will stop the execution of the template engine and return. This is useful for debugging purposes. </p> \
</div>

directive.break.doc=\
<div class="section">\
<h3><a name="break_directive"></a>#break - Stops the current directive</h3> \
<p> Format: </p> \
<p><strong> #break </strong> </p> \
<p> Usage: </p> \
<p> This will break execution of the current content directive. \
This is good for exiting a #foreach loop early, but also works in other scopes. \
You can even pass the scope control reference for a specific outer scope to break execution of all scopes outward to the specified one. </p> \
</div>

directive.evaluate.doc=\
<div class="section">\
 <h3><a name="evaluate_directive"></a>#evaluate - Dynamically evaluates a string or reference</h3>\
 <p> Format: </p> \
 <p><strong> #evaluate ( arg ) </strong></p> \
 <ul>\
  <li><em>arg</em> - String literal or reference to be dynamically evaluated.</li> \
 </ul> \
 <p> Examples: </p> \
 <ul>\
  <li>#set($flag = true ) <br>\
  Output : #evaluate('Flag is #if($flag) TRUE #else FALSE #end')</li> \
 </ul> \
</div>

directive.define.doc=\
<div class="section">\
 <h3><a name="define_directive"></a>#define - Assigns a block of VTL to a reference</h3> \
 <p> Format: </p> \
 <p><strong> #define ( <em>$ref</em> ) <em>statement</em> #end</strong> </p> \
 <ul>\
  <li><em>$ref</em> - Reference that is assigned the VTL block as a value.</li> \
  <li><em>statement</em> - Statement that is assigned to the reference.</li> \
 </ul>\
 <p> Example: </p> \
 <ul>\
  <li>#define( $hello ) Hello $who #end #set( $who = "World!") $hello ## displays Hello World!</li> \
 </ul> \
</div>

directive.macro.doc=\
<div class="section">\
<h3><a name="macro_directive"></a>#macro - Allows users to define a 'Velocimacro', a repeated segment of a VTL template, as required</h3> \
<p> Format: </p> \
<p><strong> #macro ( vmname $arg1 [ $arg2 $arg3 ... $argn ] )</strong> [ VM VTL code... ] <strong> #end</strong> </p>\
 <ul>\
  <li><em>vmname</em> - Name used to call the VM (<em>#vmname</em>)</li> \
  <li><em>$arg1 $arg2 [ ... ]</em> - Arguments to the VM. There can be any number of arguments, \
   but the number used at invocation must match the number specified in the definition.</li>\
  <li><em>[ VM VTL code... ]</em> - Any valid VTL code, anything you can put into a template, can be put into a VM.</li> \
 </ul> \
 <p> Once defined, the VM is used like any other VTL directive in a template. </p> \
 <div class="source"> <pre>#vmname( $arg1 $arg2 ) </pre> </div> \
 <p><strong>Except</strong>, that when you wish to call a VM with a body, then you must prefix the name of the VM with @. \
 The content of that body may be referenced in the macro definition via $!bodyContent as many or few times as you like. </p> \
 <div class="source"><pre>#@vmname( $arg1 $arg2 ) here is the body#end </pre> </div> \
 <p> VMs can be defined in one of two places: </p> \
 <ol type="1">\
  <li><i>Template library:</i> can be either VMs pre-packaged with Velocity or custom-made, user-defined, site-specific VMs; \
   available from any template</li> \
  <li><i>Inline:</i> found in regular templates, only usable when <em>velocimacro.permissions.allowInline=true</em> \
   in <code>velocity.properties</code>.</li> \
 </ol> \
</div>

# Telosys specific directives documentation (added in ver 2.0.7 )

directive.assertfalse.doc=\
<div class="section">\
<h3><a name="assertfalse_directive"></a>#assertFalse  </h3>\
<p><strong> Telosys directive </strong></p> \
<p> Format: </p> \
<p><strong> #assertFalse( expr, message ) </strong></p> \
 <ul>\
  <li><em>expr</em> - Expression to be evaluated.</li> \
  <li><em>message</em> - Error message  </li> \
 </ul> \
<p> Usage: </p> \
<p> Throws an error with the given message if the expression is not false</p> \
 <p> Example: </p> \
 <ul>\
  <li>#assertTrue( $flag, "Flag is not false!" ) </li> \
 </ul> \
</div>

directive.asserttrue.doc=\
<div class="section">\
<h3><a name="asserttrue_directive"></a>#assertTrue  </h3>\
<p><strong> Telosys directive </strong></p> \
 <p> Format: </p> \
 <p><strong> #assertTrue( expr, message ) </strong></p> \
 <ul>\
  <li><em>expr</em> - Expression to be evaluated.</li> \
  <li><em>message</em> - Error message  </li> \
 </ul> \
 <p> Usage: </p> \
 <p> Throws an error with the given message if the expression is not true</p> \
 <p> Example: </p> \
 <ul>\
  <li>#assertTrue( $flag, "Flag is not true!" ) </li> \
  <li>#assertTrue( $entity.hasPrimaryKey(), "Primary Key required!" ) </li> \
 </ul> \
</div>

directive.error.doc=\
<div class="section">\
<h3><a name="error_directive"></a>#error - Throws an error </h3>\
 <p><strong> Telosys directive </strong></p> \
 <p> Format: </p> \
 <p><strong> #error( message ) </strong></p> \
 <p> Usage: </p> \
 <p> Throws an error with the given message </p> \
 <p> Example: </p> \
 <ul>\
  <li>#if ( $flag ) #error("MY ERROR MESSAGE") #end  </li> \
 </ul> \
</div>

directive.using.doc=\
<div class="section">\
<h3><a name="using_directive"></a>#using </h3>\
<p><strong> Telosys directive </strong></p> \
 <p> Format: </p> \
 <p><strong> #using( arg [, arg2,  ... argn ] ) </strong></p> \
  <ul>\
   <li><em>arg</em> - Required object name </li> \
  </ul> \
 <p> Usage: </p> \
 <p> Verify if all the given objects are defined. Throws an error if one of the given objects is non defined.</p> \
 <p> Example: </p> \
 <ul>\
  <li>#using( '$var1', '$var2' ) ## Variables names with $ </li> \
  <li>#using( 'var1', "var2" ) ## Variables names without $ </li> \
 </ul> \
</div>

directive.checkid.doc=\
<div class="section">\
<h3><a name="checkid_directive"></a>#checkId </h3>\
<p><strong> Telosys directive </strong></p> \
 <p> Format: </p> \
 <p><strong> #checkId( entity ) </strong></p> \
  <ul>\
   <li><em>entity</em> - The entity to be checked </li> \
  </ul> \
 <p> Usage: </p> \
 <p> Verify if the given entity has an ID/Primary Key.</p> \
 <p> Example: </p> \
 <ul>\
  <li>#checkId( $entity ) \
 </ul> \
</div>
#directive.if.doc=#if/#elseif/#else - Output conditional on truth of statements\n\nExamples:\n\n-- #if( $foo == 42 )\n-- #if( $foo == "bar" )\n-- #if( $foo == $bar )\n-- #if( $foo != $bar )\n-- #if( $foo > 42 )\n-- #if( $foo < 42 )\n-- #if( $foo <= 42 )\n-- #if( !$foo )\n
#directive.foreach.doc=#foreach - Loops through a list of objects\n\nExamples:\n\n-- Reference: #foreach ( $item in $items )\n-- Array list: #foreach ( $item in ["Not", $my, "fault"] )\n-- Range operator: #foreach ( $item in [1..3] )\n
#directive.include.doc=#include - Renders local file(s) that are not parsed by Velocity\n\nExamples:\n\n-- String: #include( "disclaimer.txt" "opinion.txt" )\n-- Variable: #include( $foo $bar )\n
#directive.parse.doc=#parse - Renders a local template that is parsed by Velocity\n\nExamples:\n\n-- String: #parse( "lecorbusier.vm" )\n-- Variable: #parse( $foo )\n
#directive.stop.doc=#stop - Stops the template engine
#directive.break.doc=#break - Stops the current directive
#directive.evaluate.doc=#evaluate - Dynamically evaluates a string or reference\n\nExamples:\n\n-- String: #evaluate( 'string with VTL #if(true)will be displayed#end' )\n-- Variable: #include( $foo )\n
#directive.define.doc=#define - Assigns a block of VTL to a reference\n\nExamples:\n\n-- #define( $hello ) Hello $who #end #set( $who = "World!") $hello ## displays Hello World!\n
#directive.macro.doc=#macro - Allows users to define a Velocimacro (VM), a repeated segment of a VTL template, as required\n\nExamples:\n\n-- #@vmname( $arg1 $arg2 ) here is the body#end\n